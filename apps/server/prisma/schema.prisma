generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id          Int       @id @default(autoincrement())
  userId      Int?
  name        String    @db.VarChar(100)
  description String?
  cubeType    String?   @db.VarChar(10)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @db.Timestamp(6)
  isArchived  Boolean?  @default(false)
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("sessions")
}

model Solve {
  id         Int       @id @default(autoincrement())
  userId     Int?
  sessionId  Int?
  timeMs     Int
  penalty    Int?      @default(0)
  isDnf      Boolean?  @default(false)
  scramble   String
  cubeType   String?   @db.VarChar(10)
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  note       String?
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("solves")
}

model User {
  id                   Int            @id @default(autoincrement())
  uuid                 String         @unique @db.Uuid
  username             String         @unique @db.VarChar(50)
  nickname             String?        @db.VarChar(50)
  email                String         @unique @db.VarChar(100)
  passwordHash         String
  createdAt            DateTime?      @default(now()) @db.Timestamp(6)
  sessions             Session[]
  solves               Solve[]
  receivedNotifications Notification[] @relation("NotificationReceiver")
  sentNotifications     Notification[] @relation("NotificationSender")
  authSessions         AuthSession[]

  @@map("users")
}

model AuthSession {
  id           String   @id @default(cuid())
  userId       Int
  refreshToken String   @unique // zahashowany refresh token
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastActivity DateTime @default(now())
  isRevoked    Boolean  @default(false)
  
  // Metadane sesji dla zarządzania
  userAgent    String?  @db.Text
  ipAddress    String?  @db.VarChar(45) // IPv6 max length
  deviceName  String?  @db.VarChar(100) // Przyjazna nazwa urządzenia

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("auth_sessions")
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int?      // Kto otrzymuje powiadomienie
  fromId    Int?      // Kto wywołał akcję (opcjonalne)
  title     String    @db.VarChar(200)
  message   String    @db.Text
  variant   String    @default("default") @db.VarChar(20) // success, error, warning, info, default
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  
  // Relacje
  receiver  User?     @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender    User?     @relation("NotificationSender", fields: [fromId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("notifications")
}

