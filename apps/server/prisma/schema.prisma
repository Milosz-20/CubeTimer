generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id          Int       @id @default(autoincrement())
  userId      Int?
  name        String    @db.VarChar(100)
  description String?
  cubeType    String?   @db.VarChar(10)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @db.Timestamp(6)
  isArchived  Boolean?  @default(false)
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("sessions")
}

model Solve {
  id         Int       @id @default(autoincrement())
  userId     Int?
  sessionId  Int?
  timeMs     Int
  penalty    Int?      @default(0)
  isDnf      Boolean?  @default(false)
  scramble   String
  cubeType   String?   @db.VarChar(10)
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  note       String?
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("solves")
}

model User {
  id            Int        @id @default(autoincrement())
  username      String     @unique @db.VarChar(50)
  displayName   String?    @db.VarChar(50)
  email         String     @unique @db.VarChar(100)
  passwordHash  String
  createdAt     DateTime?  @default(now()) @db.Timestamp(6)
  sessions      Session[]
  solves        Solve[]

  @@map("users")
}
